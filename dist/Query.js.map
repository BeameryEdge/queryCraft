{"version":3,"file":"Query.js","sourceRoot":"","sources":["../lib/Query.ts"],"names":[],"mappings":";;AACA,6CAAqE;AASrE;IAGI;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,KAAK,CAAC,OAAe,EAAE,SAAoB;QACvC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,SAAS,CAAA;QAC9B,MAAM,CAAC,IAAI,CAAA;IACf,CAAC;IACD;;;;;;;;;;;;;;;OAeG;IACH,WAAW,KAAiB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAe,CAAA,CAAC,CAAC;IACzE,iBAAiB,CAAC,OAAe,IAAsB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAA,CAAC,CAAC;IAC1F;;;;;;;;;;;;;;;;OAgBG;IACH,oBAAoB,CAAC,OAAe;QAChC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QACzB,MAAM,CAAC,IAAI,CAAA;IACf,CAAC;IACD;;;;;;;;;;;;;;;;;;;OAmBG;IACH,kBAAkB,CAAI,KAAmD;QACrE,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE;aACpB,GAAG,CAAI,OAAO,CAAC,EAAE,CACd,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAc,CAAC,CAAC,CAAA;IACzE,CAAC;CACJ;AA9FD,oDA8FC;AAED;;;;;;GAMG;AACH,kBAA0B,SAAQ,oBAAoB;IAAtD;;QACI,SAAI,GAAkC,EAAE,CAAA;IAsD5C,CAAC;IArDG;;;;;;;;;;;;;;;;;;;OAmBG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAY;QACxB,MAAM,KAAK,GAAG,IAAI,YAAY,EAAE,CAAA;QAChC,KAAK,CAAC,IAAI,GAAG,EAAkC,CAAA;QAC/C,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,CAAA,CAAC;YACtB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAC,GAAG,CAAW,CAAC,GAAG,8BAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA;QACvF,CAAC;QACD,MAAM,CAAC,KAAK,CAAA;IAChB,CAAC;IACD;;;;;;;;;;;;;;;OAeG;IACH,MAAM;QACF,MAAM,GAAG,GAAW,EAAY,CAAA;QAChC,GAAG,CAAC,CAAC,IAAI,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC;YAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAA,CAAC;gBACpB,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,EAAC,GAAG,CAAC,CAAC,GAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAe,CAAC,MAAM,EAAE,CAAA;YAChF,CAAC;QACL,CAAC;QACD,MAAM,CAAC,GAAG,CAAA;IACd,CAAC;CACJ;AAvDD,oCAuDC;AAED;;;;;;;;;;;;;;;;;GAiBG;AACH,eAAsB,OAAe,EAAE,SAAoB;IACvD,MAAM,CAAC,IAAI,YAAY,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;AACxD,CAAC;AAFD,sBAEC","sourcesContent":["import {BasicValue} from './Values'\nimport {ICondition, Condition, conditionFromJSON} from './Conditions'\nimport {Operation} from './Operations'\n\ntype Value =  ICondition[] | BasicValue | IQuery\n\nexport interface IQuery {\n    [key: string]: ICondition\n}\n\nexport abstract class AbstractQueryBuilder {\n    protected abstract get data(): { [P in string]?: Condition }\n    protected abstract set data(condition: { [P in string]?: Condition })\n    /**\n     * Update the condition on a particular field by it's fieldId\n     *\n     * @param {string} fieldId\n     * @param {(Condition | null)} condition\n     * @returns {AbstractQueryBuilder}\n     *\n     * @memberOf AbstractQueryBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * const qb = new QueryBuilder()\n     * .where('foo', eq('bar'))\n     *\n     * qb.getFieldCondition('foo')\n     * // => eq('bar')\n     *\n     * qb.where('foo', eq('fizz'))\n     * .getFieldCondition('foo')\n     * // => eq('fizz')\n     * ```\n     */\n    where(fieldId: string, condition: Condition): this {\n        this.data[fieldId] = condition\n        return this\n    }\n    /**\n     * Return a list of the fieldIds which have conditions set.\n     *\n     * @returns {(string)[]}\n     *\n     * @memberOf AbstractQueryBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * new QueryBuilder()\n     * .where('foo', eq('bar'))\n     * .getFieldIds()\n     * // => ['foo']\n     * ```\n     */\n    getFieldIds(): (string)[] { return Object.keys(this.data) as (string)[] }\n    getFieldCondition(fieldId: string): Condition | null { return this.data[fieldId] || null }\n    /**\n     * Removes the condition on a particular field\n     *\n     * @param {string} fieldId\n     * @returns\n     *\n     * @memberOf AbstractQueryBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * new QueryBuilder().where('foo', eq('bar'))\n     * .removeFieldCondition('foo')\n     * .getFieldIds()\n     * // => []\n     * ```\n     */\n    removeFieldCondition(fieldId: string){\n        delete this.data[fieldId]\n        return this\n    }\n    /**\n     * Maps of the fields with conditions set and returns the result of applying\n     * the mapFn to the fieldId-Condition pairs.\n     *\n     * @template S\n     * @param {(fieldId: string, condition: Condition) => S} mapFn\n     * @returns {S[]}\n     *\n     * @memberOf AbstractQueryBuilder\n     * @example\n     *\n     *```ts\n     *\n     * new QueryBuilder()\n     * .where('foo', eq('bar'))\n     * .mapFieldConditions((fieldId, condition) =>\n     *     [fieldId, condition.value])\n     * // => [['foo', 'bar']]\n     * ```\n     */\n    mapFieldConditions<S>(mapFn: (fieldId: string, condition: Condition) => S): S[]{\n        return this.getFieldIds()\n            .map<S>(fieldId =>\n                mapFn(fieldId, this.getFieldCondition(fieldId) as Condition))\n    }\n}\n\n/**\n * Builder class for {@link IQuery} object\n *\n * @export\n * @class QueryBuilder\n * @extends {AbstractQueryBuilder}\n */\nexport class QueryBuilder extends AbstractQueryBuilder {\n    data: { [P in string]?: Condition } = {}\n    /**\n     * De-serializes JSON data and replaces the current query object with that data\n     *\n     * @static\n     * @param {IQuery} data\n     * @returns {this}\n     *\n     * @memberOf QueryBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * QueryBuilder\n     * .fromJSON({\"foo\":{\"op\":\"EQ\",\"value\":\"bar\"}})\n     * // same as :-\n     * new QueryBuilder()\n     * .where('foo', eq('bar'))\n     * ```\n     *\n     */\n    static fromJSON(data: IQuery) {\n        const query = new QueryBuilder()\n        query.data = {} as { [P in string]: Condition }\n        for (let fieldId in data){\n            query.data[fieldId.replace(/\\//g,'.') as string] = conditionFromJSON(data[fieldId])\n        }\n        return query\n    }\n    /**\n     * Serializes the query data into a JSON object\n     *\n     * @returns {IQuery}\n     *\n     * @memberOf QueryBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * new QueryBuilder()\n     * .where('foo', eq('bar')).toJSON()\n     * // => {\"foo\":{\"op\":\"EQ\",\"value\":\"bar\"}}\n     * ```\n     *\n     */\n    toJSON(): IQuery {\n        const res: IQuery = {} as IQuery\n        for (let fieldId in this.data){\n            if (this.data[fieldId]){\n                res[fieldId.replace(/\\./g,'/')] = (this.data[fieldId] as Condition).toJSON()\n            }\n        }\n        return res\n    }\n}\n\n/**\n * Create a new QueryBuilder with a condition already set\n *\n * @export\n * @param {string} fieldId\n * @param {Condition} condition\n * @returns {QueryBuilder}\n * @example\n *\n * ```ts\n *\n * where('foo', eq('bar'))\n * // alias for :-\n * new QueryBuilder()\n * .where('foo', eq('bar'));\n * ```\n *\n */\nexport function where(fieldId: string, condition: Condition){\n    return new QueryBuilder().where(fieldId, condition);\n}"]}