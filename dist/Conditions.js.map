{"version":3,"file":"Conditions.js","sourceRoot":"","sources":["../lib/Conditions.ts"],"names":[],"mappings":";;AASA,mCAA8C;AAmC9C;IAGI,YAAY,KAAY;QACpB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;IACtB,CAAC;IACD,MAAM,KAAiB,MAAM,CAAa,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,CAAA,CAAC,CAAC;CACjF;AAPD,sCAOC;AAED,oBAA4B,SAAQ,aAAa;IAG7C,MAAM,KAAsB,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,CAAA,CAAC,CAAC;CAC/F;AAJD,wCAIC;AAED,SAAiB,SAAQ,cAAc;IAAvC;;QACI,OAAE,GAAU,KAAK,CAAA;IAErB,CAAC;CAAA;AAHD,kBAGC;AACD,aAAoB,KAAkB,IAAG,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAAhE,kBAAgE;AAEhE,SAAiB,SAAQ,cAAc;IAAvC;;QACI,OAAE,GAAU,KAAK,CAAA;IAErB,CAAC;CAAA;AAHD,kBAGC;AACD,aAAoB,KAAkB,IAAG,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAAhE,kBAAgE;AAGhE,uBAA+B,SAAQ,aAAa;CAGnD;AAHD,8CAGC;AAED,QAAgB,SAAQ,iBAAiB;IAAzC;;QACI,OAAE,GAAS,IAAI,CAAA;IAEnB,CAAC;CAAA;AAHD,gBAGC;AACD,YAAmB,KAAiB,IAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA7D,gBAA6D;AAE7D,SAAiB,SAAQ,iBAAiB;IAA1C;;QACI,OAAE,GAAU,KAAK,CAAA;IAErB,CAAC;CAAA;AAHD,kBAGC;AACD,aAAoB,KAAiB,IAAG,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA/D,kBAA+D;AAE/D,oBAA4B,SAAQ,aAAa;CAGhD;AAHD,wCAGC;AAED,QAAgB,SAAQ,cAAc;IAAtC;;QACI,OAAE,GAAS,IAAI,CAAA;IAEnB,CAAC;CAAA;AAHD,gBAGC;AACD,YAAmB,KAAiB,IAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA7D,gBAA6D;AAE7D,QAAgB,SAAQ,cAAc;IAAtC;;QACI,OAAE,GAAS,IAAI,CAAA;IAEnB,CAAC;CAAA;AAHD,gBAGC;AACD,YAAmB,KAAiB,IAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA7D,gBAA6D;AAE7D,SAAiB,SAAQ,cAAc;IAAvC;;QACI,OAAE,GAAU,KAAK,CAAA;IAErB,CAAC;CAAA;AAHD,kBAGC;AACD,aAAoB,KAAiB,IAAG,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA/D,kBAA+D;AAE/D,SAAiB,SAAQ,cAAc;IAAvC;;QACI,OAAE,GAAU,KAAK,CAAA;IAErB,CAAC;CAAA;AAHD,kBAGC;AACD,aAAoB,KAAiB,IAAG,MAAM,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAA/D,kBAA+D;AAE/D,qBAA6B,SAAQ,aAAa;CAGjD;AAHD,0CAGC;AAED,YAAoB,SAAQ,eAAe;IAA3C;;QACI,OAAE,GAAa,QAAQ,CAAA;IAE3B,CAAC;CAAA;AAHD,wBAGC;AACD,gBAAuB,KAAa,IAAG,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAAjE,wBAAiE;AAEjE,oBAA4B,SAAQ,aAAa;IAG7C,MAAM,KAAsB,MAAM,CAAC,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,CAAA,CAAC,CAAC;CACnF;AAJD,wCAIC;AAED,UAAkB,SAAQ,cAAc;IAAxC;;QACI,OAAE,GAAmB,MAAM,CAAA;IAC/B,CAAC;CAAA;AAFD,oBAEC;AACD,cAAqB,KAAmB,IAAG,MAAM,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAAnE,oBAAmE;AAEnE,WAAmB,SAAQ,cAAc;IAAzC;;QACI,OAAE,GAAmB,OAAO,CAAA;IAChC,CAAC;CAAA;AAFD,sBAEC;AACD,eAAsB,KAAmB,IAAG,MAAM,CAAC,IAAI,KAAK,CAAC,KAAK,CAAC,CAAA,CAAC,CAAC;AAArE,sBAAqE;AAErE,2BAAkC,IAAgB;IAC9C,MAAM,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;QACd,KAAK,KAAK;YACN,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACrD,KAAK,KAAK;YACN,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC,CAAA;QACrD,KAAK,IAAI;YACL,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC7B,KAAK,KAAK;YACN,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC9B,KAAK,IAAI;YACL,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC7B,KAAK,IAAI;YACL,MAAM,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC7B,KAAK,KAAK;YACN,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC9B,KAAK,KAAK;YACN,MAAM,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QAC9B,KAAK,QAAQ;YACT,MAAM,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;QACjC,KAAK,MAAM;YACP,MAAM,CAAC,IAAI,IAAI,CAAC,oBAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;QACtD,KAAK,OAAO;YACR,MAAM,CAAC,IAAI,KAAK,CAAC,oBAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAA;QACvD;YACI,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAA;IAC5C,CAAC;AACL,CAAC;AA3BD,8CA2BC","sourcesContent":["import {\n    Operation,\n    MatchOperation,\n    EqualityOperation,\n    OrderOperation,\n    QueryOperation,\n    StringOperation\n} from './Operations'\nimport { BasicValue } from './Values'\nimport { IQuery, QueryBuilder } from './Query'\nexport interface IBaseCondition {\n    op: Operation\n    value: BasicValue | Array<IBaseCondition> | IQuery\n}\n\nexport interface IMatchCondition extends IBaseCondition {\n    op: MatchOperation\n    value: Array<ICondition>\n}\n\nexport interface IEqualityCondition extends IBaseCondition {\n    op: EqualityOperation\n    value: BasicValue\n}\n\nexport interface IOrderCondition extends IBaseCondition {\n    op: OrderOperation\n    value: BasicValue\n}\n\nexport interface IStringCondition extends IBaseCondition {\n    op: StringOperation\n    value: string\n}\n\nexport interface IQueryCondition extends IBaseCondition {\n    op: QueryOperation\n    value: IQuery\n}\n\nexport type ICondition = IMatchCondition | IEqualityCondition | IOrderCondition | IStringCondition | IQueryCondition\n\nexport type Condition = MatchCondition | EqualityCondition | OrderCondition | StringCondition | QueryCondition\nexport type Value = Condition[] | BasicValue | QueryBuilder\nexport abstract class BaseCondition {\n    op: Operation\n    value: Value\n    constructor(value: Value) {\n        this.value = value\n    }\n    toJSON(): ICondition { return <ICondition>{ op: this.op, value: this.value } }\n}\n\nexport class MatchCondition extends BaseCondition {\n    op: MatchOperation\n    value: Condition[]\n    toJSON(): IMatchCondition { return { op: this.op, value: this.value.map($ => $.toJSON()) } }\n}\n\nexport class ALL extends MatchCondition {\n    op: 'ALL' = 'ALL'\n    value: Condition[]\n}\nexport function all(value: Condition[]){ return new ALL(value) }\n\nexport class ANY extends MatchCondition {\n    op: 'ANY' = 'ANY'\n    value: Condition[]\n}\nexport function any(value: Condition[]){ return new ANY(value) }\n\n\nexport class EqualityCondition extends BaseCondition implements IEqualityCondition {\n    op: EqualityOperation\n    value: BasicValue\n}\n\nexport class EQ extends EqualityCondition {\n    op: 'EQ' = 'EQ'\n    value: BasicValue\n}\nexport function eq(value: BasicValue){ return new EQ(value) }\n\nexport class NEQ extends EqualityCondition {\n    op: 'NEQ' = 'NEQ'\n    value: BasicValue\n}\nexport function neq(value: BasicValue){ return new NEQ(value) }\n\nexport class OrderCondition extends BaseCondition implements IOrderCondition {\n    op: OrderOperation\n    value: BasicValue\n}\n\nexport class LT extends OrderCondition {\n    op: 'LT' = 'LT'\n    value: BasicValue\n}\nexport function lt(value: BasicValue){ return new LT(value) }\n\nexport class GT extends OrderCondition {\n    op: 'GT' = 'GT'\n    value: BasicValue\n}\nexport function gt(value: BasicValue){ return new GT(value) }\n\nexport class LTE extends OrderCondition {\n    op: 'LTE' = 'LTE'\n    value: BasicValue\n}\nexport function lte(value: BasicValue){ return new LTE(value) }\n\nexport class GTE extends OrderCondition {\n    op: 'GTE' = 'GTE'\n    value: BasicValue\n}\nexport function gte(value: BasicValue){ return new GTE(value) }\n\nexport class StringCondition extends BaseCondition implements IStringCondition {\n    op: StringOperation\n    value: string\n}\n\nexport class PREFIX extends StringCondition {\n    op: 'PREFIX' = 'PREFIX'\n    value: string\n}\nexport function prefix(value: string){ return new PREFIX(value) }\n\nexport class QueryCondition extends BaseCondition {\n    op: QueryOperation\n    value: QueryBuilder\n    toJSON(): IQueryCondition { return { op: this.op, value: this.value.toJSON() } }\n}\n\nexport class FIND extends QueryCondition {\n    op: QueryOperation = 'FIND'\n}\nexport function find(value: QueryBuilder){ return new FIND(value) }\n\nexport class NFIND extends QueryCondition {\n    op: QueryOperation = 'NFIND'\n}\nexport function nfind(value: QueryBuilder){ return new NFIND(value) }\n\nexport function conditionFromJSON(json: ICondition): Condition {\n    switch (json.op) {\n        case 'ANY':\n            return new ANY(json.value.map(conditionFromJSON))\n        case 'ALL':\n            return new ALL(json.value.map(conditionFromJSON))\n        case 'EQ':\n            return new EQ(json.value)\n        case 'NEQ':\n            return new NEQ(json.value)\n        case 'LT':\n            return new LT(json.value)\n        case 'GT':\n            return new GT(json.value)\n        case 'LTE':\n            return new LTE(json.value)\n        case 'GTE':\n            return new GTE(json.value)\n        case 'PREFIX':\n            return new PREFIX(json.value)\n        case 'FIND':\n            return new FIND(QueryBuilder.fromJSON(json.value))\n        case 'NFIND':\n            return new NFIND(QueryBuilder.fromJSON(json.value))\n        default:\n            throw new Error('Unknown Operation')\n    }\n}"]}