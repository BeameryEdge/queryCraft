{"version":3,"file":"Filter.js","sourceRoot":"","sources":["../lib/Filter.ts"],"names":[],"mappings":"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","sourcesContent":["import {BasicValue} from './Values'\nimport {OrderOperation} from './Operations'\nimport {Condition, find, eq, gt, lt} from './Conditions'\nimport {IQuery, QueryBuilder, AbstractQueryBuilder, where} from './Query'\n\nexport type SortDirection = 'ASC' | 'DESC'\n\n/**\n * Inteface for the the json representations of a statement which is conceptually\n * a list of queries of which at least one must be true\n */\nexport type Statement = IQuery[]\n/**\n * A StatementBuilder is a non-empty list of [QueryBuilder]{@link QueryBuilder} instances\n */\nexport type StatementBuilder = QueryBuilder[]\n\n/**\n * Interface for the json representation of a filter\n * This is the structure of the json that that will be produced by the Filter Builder\n *\n * it contains information about the logic of the filter it represents and any filters\n * or sorts that should be applied.\n *\n * The filter that should be applied is described by the [statements]{@link IFilter#statements}\n * property which is an Array of [statements]{@link Statement} of which all the\n * statement must hold. Each statement is a list of queries of which at least one\n * must hold. If one thinks of the queries as a logical clause then we can think of\n * this structure represent a logical formula in [conjunctive normal form]{@link https://en.wikipedia.org/wiki/Conjunctive_normal_form}.\n *\n * @export\n * @interface IFilter\n * @example\n *\n * ```ts\n *\n *   let json: IFilter = {\n *       \"statements\": [\n *           [{\n *               \"firstName\": {\n *                   \"op\": \"EQ\",\n *                   \"value\": \"bob\"\n *               },\n *               \"list\": {\n *                   \"op\": \"FIND\",\n *                   \"value\": {\n *                       \"id\": {\n *                           \"op\": \"EQ\",\n *                           \"value\": \"list-1\"\n *                       }\n *                   }\n *               },\n *               \"lastName\": {\n *                   \"op\": \"ANY\",\n *                   \"value\": [{\n *                       \"op\": \"EQ\",\n *                       \"value\": \"doyle\"\n *                   }, {\n *                       \"op\": \"EQ\",\n *                       \"value\": null\n *                   }, {\n *                       \"op\": \"EQ\",\n *                       \"value\": \"Smith\"\n *                   }]\n *               },\n *               \"assignedTo\": {\n *                   \"op\": \"NEQ\",\n *                   \"value\": null\n *               },\n *               \"updatedAt\": {\n *                   \"op\": \"LT\",\n *                   \"value\": {\n *                       \"daysAgo\": 5\n *                   }\n *               }\n *           }]\n *       ],\n *       \"sortFieldId\": \"customFields\",\n *       \"sortFieldSubId\": \"custom1\",\n *       \"sortFieldSubProp\": \"value\",\n *       \"sortDir\": \"ASC\",\n *       \"limit\": 50\n *   }\n *   ```\n */\nexport interface IFilter {\n    /**\n     * The list of statements which filter must apply\n     *\n     * @type {IStatement[]}\n     * @memberOf IFilter\n     */\n    statements: Statement[]\n    /**\n     * field Id for the filter to sort on\n     *\n     * @type {string}\n     * @memberOf IFilter\n     */\n    sortFieldId?: string\n    /**\n     * Direction of sort\n     *\n     * @type {SortDirection}\n     * @memberOf IFilter\n     */\n    sortDir: SortDirection\n    /**\n     * If sorting on a nested field, this is the id of the nested object\n     * to use for sorting\n     *\n     * @type {string}\n     * @memberOf IFilter\n     */\n    sortFieldSubId?: string\n    /**\n     * If sorting on a nested field, this is the field in the nested object\n     * to sort on\n     *\n     * @type {string}\n     * @memberOf IFilter\n     */\n    sortFieldSubProp?: string\n    /**\n     * This is the maximum number of items the filter should allow to be\n     * returned\n     *\n     * @type {number}\n     * @memberOf IFilter\n     */\n    limit: number\n}\n\nexport interface Datum {\n    [fieldId: string]: BasicValue | Datum | Datum[]\n}\n\n/**\n * Filter builder class, used to create filter objects that can be converted into queries\n *\n * @export\n * @class FilterBuilder\n * @extends {AbstractQueryBuilder}\n * @implements {IFilter}\n * @example\n *\n * ```ts\n *\n * const filter = new FilterBuilder()\n * .where('id', eq('this'))\n * .or()\n * .where('id', eq('that'))\n * .and()\n * .where('name', eq('bob'))\n * ```\n *\n */\nexport class FilterBuilder extends AbstractQueryBuilder implements IFilter {\n    limit = 100\n\n    /**\n     * Creates a shallow clone of the FilterBuilder instance\n     *\n     * @returns {FilterBuilder}\n     *\n     * @memberOf FilterBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * describe('.clone', function(){\n     *     it('should create shallow clone', function(){\n     *         const newFilter = FilterBuilder.fromJSON(json)\n     *         const clonedFilter = newFilter.clone()\n     *\n     *         assert.notEqual(newFilter, clonedFilter)\n     *         assert.deepEqual(newFilter, clonedFilter)\n     *     })\n     * })\n     * ```\n     */\n    clone(): FilterBuilder {\n        return Object.assign(new FilterBuilder(), {\n            _statements: this._statements,\n            sortFieldId: this.sortFieldId,\n            sortDir: this.sortDir,\n            sortFieldSubId: this.sortFieldSubId,\n            sortFieldSubProp: this.sortFieldSubProp,\n            limit: this.limit\n        })\n    }\n\n    private _statements = [[new QueryBuilder()]] as QueryBuilder[][]\n    /**\n     *\n     * @override\n     * @protected\n     * @type {{ [P in string]?: Condition }}\n     * @memberOf FilterBuilder\n     */\n    protected get data(): { [P in string]?: Condition } {\n        return this._statements[0][0].data\n    }\n    protected set data(data){\n        this._statements[0][0].data = data\n    }\n    /**\n     *\n     * @override\n     * @type {IStatement[]}\n     * @memberOf FilterBuilder\n     */\n    get statements(): Statement[] {\n        return this._statements\n                .map(options => options\n                    .map(query => query.toJSON()))\n    }\n    set statements(statements: Statement[]){\n        this.setStatementBuilders(statements\n                .map(options => options\n                    .map(query => QueryBuilder.fromJSON(query))))\n    }\n    /**\n     * Extends the current active statement with a new query which becomes the active\n     * query and `where` statements then apply to the new query until `.and`/`.or` is\n     * called on the filter\n     *\n     * @returns {this} returns the current filter builder for chaining\n     *\n     * @memberOf FilterBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * new FilterBuilder()\n     * .where('id', eq('this'))\n     * .or()\n     * .where('id', eq('that'))\n     * .and()\n     * .where('name', eq('bob'))\n     * // =>  (id is 'this' OR id is that) AND name is 'bob'\n     *\n     * new FilterBuilder()\n     * .where('id', eq('this'))\n     * .and()\n     * .where('id', eq('that'))\n     * .or()\n     * .where('name', eq('bob'))\n     * // =>  id is 'this' AND (id is that OR name is 'bob')\n     * ```\n     */\n    or(){\n        this._statements[0].unshift(new QueryBuilder())\n        return this\n    }\n    /**\n     * Extends the filter with a new statement which becomes the active statement\n     * and `where` statements then apply to the new statement's default query\n     * until `.and`/`.or` is called on the filter\n     *\n     * @returns {this} returns the current filter builder for chaining\n     *\n     * @memberOf FilterBuilder\n     * @example\n     *\n     * ```ts\n     *\n     * new FilterBuilder()\n     * .where('id', eq('this'))\n     * .or()\n     * .where('id', eq('that'))\n     * .and()\n     * .where('name', eq('bob'))\n     * // =>  (id is 'this' OR id is that) AND name is 'bob'\n     *\n     * new FilterBuilder()\n     * .where('id', eq('this'))\n     * .and()\n     * .where('id', eq('that'))\n     * .or()\n     * .where('name', eq('bob'))\n     * // =>  id is 'this' AND (id is that OR name is 'bob')\n     * ```\n     */\n    and(){\n        this._statements.unshift([new QueryBuilder()])\n        return this\n    }\n    /**\n     * Get the statement builders used for the filter\n     *\n     * @returns {Statements[]}\n     *\n     * @memberOf FilterBuilder\n     */\n    getStatementBuilders(){ return this._statements }\n\n    /**\n     * Set the statements object for the filter builder\n     *\n     * @param {QueryBuilder[][]} statements\n     * @returns\n     * @example\n     *\n     * @memberOf FilterBuilder\n     *\n     * ```ts\n     *\n     * describe('.setStatements', function(){\n     *     it('should be able to add statements to the filter',function(){\n     *         myFilter.clone().setStatements([\n     *             ...myFilter.getStatements(),\n     *             [\n     *                 where('list.id', eq('list-1')),\n     *                 where('vacancy.id', eq('vacancy1')),\n     *             ]\n     *         ])\n     *     })\n     *\n     *     it('should throw if no statements are set',function(){\n     *         assert.throws(() => {\n     *             myFilter.clone().setStatements([])\n     *         })\n     *     })\n     *\n     *\n     *     it('should throw if a statement is added with no queries',function(){\n     *         assert.throws(() => {\n     *             myFilter.clone().setStatements([[]])\n     *         })\n     *     })\n     * })\n     *\n     * ```\n     */\n    setStatementBuilders(statements: StatementBuilder[]){\n        if (!Array.isArray(statements) || statements.length === 0) {\n            throw new Error('A filter must have at least one statement')\n        }\n\n        this._statements = statements.map(statement => {\n            if (!Array.isArray(statement) || statement.length === 0) {\n                throw new Error('Each statement must contain a least one query')\n            }\n            return [...statement]\n        })\n        return this\n    }\n    /**\n     * Add a new StatementBuilder to the class\n     *\n     * @param {StatementBuilder} sb\n     * @returns\n     *\n     * @memberOf FilterBuilder\n     */\n    addStatementBuilder(sb: StatementBuilder){\n        return this.setStatementBuilders(this.getStatementBuilders().concat([sb]))\n    }\n\n    static fromJSON<T extends { id: string }>(json: IFilter){ return Object.assign(new FilterBuilder(), json) }\n    getLimit(){ return this.limit }\n    setLimit(limit: number){ this.limit = limit; return this }\n\n    sortFieldId: string = 'id'\n    sortFieldSubId?: string\n    sortFieldSubProp?: string\n    getSortFieldId(): string { return this.sortFieldId }\n    getSortFieldSubId(): string | null { return this.sortFieldSubId || null }\n    getSortFieldSubProp(): string | null { return this.sortFieldSubProp || null }\n    /**\n     * set the sort field\n     *\n     * @param {string} fieldId\n     * @param {string} [sortFieldSubId] the id of the item used for sorting required if sorting on a key in a array\n     * @param {string} [sortFieldSubProp] the property that needs to be sorted on\n     * @returns {Filter}\n     *\n     * @memberOf Filter\n     */\n    setSortFieldId(fieldId: string, sortFieldSubId?: string, sortFieldSubProp?: string): FilterBuilder {\n        this.sortFieldId = fieldId;\n        this.sortFieldSubId = sortFieldSubId;\n        this.sortFieldSubProp = sortFieldSubProp;\n        return this }\n\n    sortDir: SortDirection = 'DESC'\n    getSortDirection(): SortDirection { return this.sortDir }\n    setSortDirection(dir: SortDirection): FilterBuilder { this.sortDir = dir; return this }\n    /**\n     * return a JSON data representation in the internal data struture\n     */\n    toJSON(): IFilter {\n        const json = {\n            statements: this.statements,\n            sortDir: this.sortDir,\n            limit: this.limit\n        } as IFilter\n\n        if (this.sortFieldId !== undefined){\n            json.sortFieldId = this.sortFieldId\n        }\n\n        if (this.sortFieldSubId !== undefined && this.sortFieldSubProp !== undefined){\n            json.sortFieldSubId = this.sortFieldSubId\n            json.sortFieldSubProp = this.sortFieldSubProp\n        }\n        return json\n    }\n    /**\n     * return a querystring\n     */\n    toQueryString(): string { return this.toString() }\n    /**\n     * return a querystring\n     */\n    toString(): string { return '' +\n        '&statements=' + JSON.stringify(this.statements) +\n        (this.sortFieldId ?\n            '&sortFieldId=' + this.sortFieldId +\n            (this.sortFieldSubId && this.sortFieldSubProp ?\n                '&sortFieldSubId=' + this.sortFieldSubId +\n                '&sortFieldSubProp=' + this.sortFieldSubProp : '') +\n            '&sortDir=' + this.sortDir : '') +\n        '&limit=' + this.limit\n    }\n\n    /**\n     * Return a new filter that gets the next page worth of data after a\n     * a particular lastItem\n     *\n     * @param {T} lastItem\n     * @returns {Filter}\n     */\n    /** */\n    createPaginatedFilter(lastItem?: Datum & { id: string }): FilterBuilder {\n        const sortFieldId = this.getSortFieldId()\n        if (!lastItem || !sortFieldId) return this.clone()\n        const sortFieldSubId = this.getSortFieldSubId()\n        const sortFieldSubProp = this.getSortFieldSubProp()\n\n        let lastItemSortFieldValue: Datum | BasicValue = lastItem;\n        for (let pathComponent of sortFieldId.split(/\\./g)){\n            if (lastItemSortFieldValue && !(lastItemSortFieldValue as Datum)[pathComponent]) break\n            lastItemSortFieldValue = (lastItemSortFieldValue as Datum)[pathComponent] as (Datum | BasicValue)\n        }\n\n        const op = { 'ASC': gt, 'DESC': lt } [this.getSortDirection()]\n\n        if (sortFieldSubId && sortFieldSubProp){\n            if (Array.isArray(lastItemSortFieldValue)) {\n                const subProp = lastItemSortFieldValue\n                    .find($ => $ && ($.id as string) === sortFieldSubId) as Datum | undefined\n                const sortFieldSubValue = ((subProp && subProp[sortFieldSubProp]) || null) as BasicValue\n\n                return this.clone().addStatementBuilder([\n                    // filter items below list item\n                    where(sortFieldId, find(\n                        where('id', eq(sortFieldSubId))\n                        .where(sortFieldSubProp, op(sortFieldSubValue)))\n                    ),\n                    // if filter value is the same ensure the id is different\n                    where(sortFieldId, find(\n                        where('id', eq(sortFieldSubId))\n                        .where(sortFieldSubProp, eq(sortFieldSubValue))))\n                    .where('id', op(lastItem.id as string))\n                ])\n\n            } else {\n                return this.clone()\n            }\n        } else if (lastItemSortFieldValue instanceof Date ||\n            typeof lastItemSortFieldValue !== 'object') {\n            // If the sort value is good add the sort statement\n            return this.clone().addStatementBuilder([\n                // filter items below list item\n                where(sortFieldId, op(lastItemSortFieldValue)),\n                // if filter value is the same ensure the id is different\n                where('id', op(lastItem.id as string))\n                .where(sortFieldId, eq(lastItemSortFieldValue))\n            ])\n        } else {\n            // If the value we find is not value-like then treat as null\n            return this.clone()\n        }\n    }\n}"]}